'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (ast) {
  _traverser2.default.replace(ast, {
    enter: function enter(node) {
      if ((0, _functionType.isFunction)(node)) {
        transformDefaultParams(node);
      }
    }
  });
};

var _fMatches = require('f-matches');

var _fp = require('lodash/fp');

var _destructuring = require('../../utils/destructuring');

var _traverser = require('../../traverser');

var _traverser2 = _interopRequireDefault(_traverser);

var _multiReplaceStatement = require('../../utils/multiReplaceStatement');

var _multiReplaceStatement2 = _interopRequireDefault(_multiReplaceStatement);

var _functionType = require('../../utils/functionType');

var _matchOrAssignment = require('./matchOrAssignment');

var _matchOrAssignment2 = _interopRequireDefault(_matchOrAssignment);

var _matchTernaryAssignment = require('./matchTernaryAssignment');

var _matchTernaryAssignment2 = _interopRequireDefault(_matchTernaryAssignment);

var _matchIfUndefinedAssignment = require('./matchIfUndefinedAssignment');

var _matchIfUndefinedAssignment2 = _interopRequireDefault(_matchIfUndefinedAssignment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function transformDefaultParams(fn) {
  var detectedDefaults = findDefaults(fn.body.body);

  fn.params = fn.params.map(function (param, i) {
    // Ignore params that use destructoring or already have a default
    if (param.type !== 'Identifier') {
      return param;
    }

    var detected = detectedDefaults[param.name];
    // Transform when default value detected
    // and default does not contain this or any of the remaining parameters
    if (detected && !containsParams(detected.value, remainingParams(fn, i))) {
      (0, _multiReplaceStatement2.default)({
        parent: fn.body,
        node: detected.node,
        replacements: []
      });
      return withDefault(param, detected.value);
    }

    return param;
  });
}

function withDefault(param, value) {
  return {
    type: 'AssignmentPattern',
    left: param,
    right: value
  };
}

function remainingParams(fn, i) {
  return fn.params.slice(i);
}

function containsParams(defaultValue, params) {
  return (0, _fp.flow)((0, _fp.flatMap)(_destructuring.extractVariables), (0, _fp.some)(function (param) {
    return _traverser2.default.find(defaultValue, (0, _fMatches.matches)({
      type: 'Identifier',
      name: param.name
    }));
  }))(params);
}

// Looks default value assignments at the beginning of a function
//
// Returns a map of variable-name:{name, value, node}
function findDefaults(fnBody) {
  var defaults = {};

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = fnBody[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var node = _step.value;

      var def = matchDefaultAssignment(node);
      if (!def) {
        break;
      }
      defaults[def.name] = def;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return defaults;
}

function matchDefaultAssignment(node) {
  return (0, _matchOrAssignment2.default)(node) || (0, _matchTernaryAssignment2.default)(node) || (0, _matchIfUndefinedAssignment2.default)(node);
}